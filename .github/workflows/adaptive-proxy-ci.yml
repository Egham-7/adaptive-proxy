name: Backend CI/CD
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:
env:
  GO_VERSION: "1.25"
jobs:
  test:
    name: Test & Coverage
    runs-on: blacksmith-4vcpu-ubuntu-2404
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download dependencies
        run: go mod download
      - name: Verify dependencies
        run: go mod verify
      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          file: coverage.txt
          flags: backend
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
  lint:
    name: Lint
    runs-on: blacksmith-4vcpu-ubuntu-2404
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install gofumpt
        run: go install mvdan.cc/gofumpt@latest
      - name: Check formatting
        run: |
          if [ "$(gofumpt -l -extra .)" != "" ]; then
            echo "The following files are not properly formatted:"
            gofumpt -l -extra .
            echo "Please run 'gofumpt -w -extra .' to fix formatting issues"
            exit 1
          fi
          if [ "$(goimports -l .)" != "" ]; then
            echo "The following files have incorrect import organization:"
            goimports -l .
            echo "Please run 'goimports -w .' to fix import organization"
            exit 1
          fi
      - name: Install modernize analyzer
        run: go install golang.org/x/tools/gopls/internal/analysis/modernize/cmd/modernize@latest
      - name: Check for modern Go code
        run: |
          go vet -vettool="$(go env GOPATH)/bin/modernize" ./...
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m
  security:
    name: Security Scan
    runs-on: blacksmith-4vcpu-ubuntu-2404
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download dependencies
        run: go mod download
      - name: Install Gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest
      - name: Run Gosec
        run: gosec -exclude-dir=vendor -exclude-dir=testdata ./...
  build:
    name: Build
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: [test, lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build
        run: go build -v ./...
